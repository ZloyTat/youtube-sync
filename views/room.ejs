<!DOCTYPE html>
<html lang="en">
	<head>
	    <meta charset="utf-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1">
		<link href="css/room.css" rel="stylesheet">

		<!--OPTIONAL "Raleway" font -->
		<link href="https://fonts.googleapis.com/css?family=Raleway" rel="stylesheet">

        <script src="http://code.jquery.com/jquery-1.11.1.js"></script>
        <script src="js/socket.io.js"></script>
        <script>
            var socket = io();
        </script>
        <title><%=title%></title>
    </head>

    <body>
    	<div class="row" id="header">
    		<div class="col-1-1">
    			<div class="content">
    				Navbar
    			</div>
    		</div>
    	</div>
        <div class="row" id="body-container">
            <div class="col-1-6" id="left-column">
                <p>Users</p>
                <div id="user-list"></div>
            </div>
            <div class="col-5-8" id="main-area">
                <div class="content">
                    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
                    <div id="player"></div>
                    <script>
                        // 2. This code loads the IFrame Player API code asynchronously.
                        var tag = document.createElement('script');

                        tag.src = "https://www.youtube.com/iframe_api";
                        var firstScriptTag = document.getElementsByTagName('script')[0];
                        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

                        // 3. This function creates an <iframe> (and YouTube player)
                        //    after the API code downloads.
                        var player;
                        function onYouTubeIframeAPIReady() {
                            player = new YT.Player('player', {
                                height: '480',
                                width: '900',
                                videoId: 'M7lc1UVf-VE',
                                events: {
                                    'onReady': onPlayerReady,
                                    'onStateChange': onPlayerStateChange
                                }
                            });
                        }

                        // 4. The API will call this function when the video player is ready.
                        function onPlayerReady(event) {
                            event.target.playVideo();
                        }

                        // 5. The API calls this function when the player's state changes.
                        //    The function indicates that when playing a video (state=1),
                        //    the player should play for six seconds and then stop.
                        var done = false;
                        function onPlayerStateChange(event) {
                            if (event.data == YT.PlayerState.PLAYING && !done) {
                                setTimeout(stopVideo, 6000);
                                done = true;
                            }
                        }
                        function stopVideo() {
                            player.stopVideo();
                        }
                    </script>
                </div>
            </div>
            <div class="col-custom" id="right-column">
                <div class="row" id="chat-header">
                    Live chat
                </div>
                <div class="row" id="chat-body">
                    <div id="messages"></div>
                </div>
                <div class="row" id="chat-submit-container">
                    <form id="chat-submit">
                        <input type="text" placeholder="Message" autocomplete="off" id="chat-input">
                    </form>
                </div>
            </div>
        </div>
        <div id="nameModal" class="modal">
            <div class="modal-content">
                <form id="name-submit">
                    <input type="text" placeholder="Enter your name to begin" autocomplete="off" id="name-input">
                </form>
            </div>
        </div>

        <script>
            var modal = document.getElementById("nameModal");
            var notificationSfx = new Audio('sfx/blop-sfx.mp3');

            // Get the room code
            var roomCode = window.location.href.slice(-5)

            var inputtedName;

            // Initial prompt for a new user asking for their name
            $('#name-submit').submit(function(){

                // Close the modal after they have submitted a name
                modal.style.display = "none";


                // Grab the string from the input field
                inputtedName = $("#name-input").val();

                socket.emit("new-user", {user : inputtedName, code : roomCode});
                return false;
            });

            // Sending a client-side message
            $('#chat-submit').submit(function(){

                var message = $("#chat-input").val();

                socket.emit("chat-submit", {msg : message, code : roomCode, user : inputtedName});
                $('#chat-input').val("");

                return false;
            });


            // Receiving a new message
            socket.on("update-messages", function(data){
                if(data.user.substring(0,1) === "â˜…")
                    $("#messages").append($('<div class="chat-message master">').html("<strong>" + data.user + ": </strong> " + data.msg));
                else
                $("#messages").append($('<div class="chat-message">').html("<strong>" + data.user + ": </strong> " + data.msg));
                notificationSfx.play();
            });

            // Receiving an alert of a new connection
            socket.on("update-users", function(people){
                $("#user-list").html('');
                for(var i = 0; i < people.length; i++){
                    $("#user-list").append($('<div class="online-users">').text(people[i].name));
                }
            });

            // Receiving an alert of someone connecting
            socket.on("connection-message", function(name){
                $("#messages").append($('<div class="chat-message leaver">').html("<strong>" + name + " has joined the room</strong>"));
            })

            // Receiving an alert of someone disconnecting
            socket.on("disconnection-message", function(name){
                $("#messages").append($('<div class="chat-message leaver">').html("<strong>" + name + " has left the room</strong>"));
            });

            
        </script>
    </body>
</html>